diff --git a/components/sync/engine_impl/sync_scheduler_impl.cc b/components/sync/engine_impl/sync_scheduler_impl.cc
index 8442f8521ee12924eed5daa0182656bc7553b758..a863c36c10cd9d15d13717cc0459dade32bde68e 100644
--- a/components/sync/engine_impl/sync_scheduler_impl.cc
+++ b/components/sync/engine_impl/sync_scheduler_impl.cc
@@ -469,8 +469,11 @@ void SyncSchedulerImpl::DoNudgeSyncCycleJob(JobPriority priority) {
   DVLOG(2) << "Will run normal mode sync cycle with types "
            << ModelTypeSetToString(GetEnabledAndUnblockedTypes());
   SyncCycle cycle(cycle_context_, this);
-  bool success = syncer_->NormalSyncShare(GetEnabledAndUnblockedTypes(),
-                                          &nudge_tracker_, &cycle);
+  // bool success = syncer_->NormalSyncShare(GetEnabledAndUnblockedTypes(),
+  //                                         &nudge_tracker_, &cycle);
+  bool success = true;
+  for (auto& observer : *cycle_context_->listeners())
+    observer.OnNudgeSyncCycle();
 
   if (success) {
     // That cycle took care of any outstanding work we had.
@@ -504,9 +507,10 @@ void SyncSchedulerImpl::DoConfigurationSyncCycleJob(JobPriority priority) {
             << ModelTypeSetToString(
                    pending_configure_params_->types_to_download);
   SyncCycle cycle(cycle_context_, this);
-  bool success =
-      syncer_->ConfigureSyncShare(pending_configure_params_->types_to_download,
-                                  pending_configure_params_->origin, &cycle);
+  // bool success =
+  //     syncer_->ConfigureSyncShare(pending_configure_params_->types_to_download,
+  //                                 pending_configure_params_->origin, &cycle);
+  bool success = true;
 
   if (success) {
     SDVLOG(2) << "Configure succeeded.";
@@ -572,7 +576,10 @@ void SyncSchedulerImpl::DoPollSyncCycleJob() {
   SDVLOG(2) << "Polling with types "
             << ModelTypeSetToString(GetEnabledAndUnblockedTypes());
   SyncCycle cycle(cycle_context_, this);
-  bool success = syncer_->PollSyncShare(GetEnabledAndUnblockedTypes(), &cycle);
+  // bool success = syncer_->PollSyncShare(GetEnabledAndUnblockedTypes(), &cycle);
+  bool success = true;
+  for (auto& observer : *cycle_context_->listeners())
+    observer.OnPollSyncCycle();
 
   // Only restart the timer if the poll succeeded. Otherwise rely on normal
   // failure handling to retry with backoff.
